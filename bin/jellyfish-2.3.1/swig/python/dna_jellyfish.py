# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""Jellyfish binding"""

from sys import version_info as _swig_python_version_info

import os
if os.path.basename(__file__) == "__init__.pyc" or os.path.basename(__file__) == "__init__.py":
  import dna_jellyfish._dna_jellyfish
else:
  import _dna_jellyfish


try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class MerDNA(object):
    r"""Class representing a mer. All the mers have the same length, which must be set BEFORE instantiating any mers with jellyfish::MerDNA::k(int)"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""Class representing a mer. All the mers have the same length, which must be set BEFORE instantiating any mers with jellyfish::MerDNA::k(int)Class representing a mer. All the mers have the same length, which must be set BEFORE instantiating any mers with jellyfish::MerDNA::k(int)Class representing a mer. All the mers have the same length, which must be set BEFORE instantiating any mers with jellyfish::MerDNA::k(int)"""
        _dna_jellyfish.MerDNA_swiginit(self, _dna_jellyfish.new_MerDNA(*args))

    @staticmethod
    def k(*args):
        r"""Get the length of the k-mersSet the length of the k-mers"""
        return _dna_jellyfish.MerDNA_k(*args)

    def polyA(self):
        r"""Change the mer to a homopolymer of A"""
        return _dna_jellyfish.MerDNA_polyA(self)

    def polyC(self):
        r"""Change the mer to a homopolymer of C"""
        return _dna_jellyfish.MerDNA_polyC(self)

    def polyG(self):
        r"""Change the mer to a homopolymer of G"""
        return _dna_jellyfish.MerDNA_polyG(self)

    def polyT(self):
        r"""Change the mer to a homopolymer of T"""
        return _dna_jellyfish.MerDNA_polyT(self)

    def randomize(self):
        r"""Change the mer to a random one"""
        return _dna_jellyfish.MerDNA_randomize(self)

    def is_homopolymer(self):
        r"""Check if the mer is a homopolymer"""
        return _dna_jellyfish.MerDNA_is_homopolymer(self)

    def shift_left(self, arg2):
        r"""Shift a base to the left and the leftmost base is return . "ACGT", shift_left('A') becomes "CGTA" and 'A' is returned"""
        return _dna_jellyfish.MerDNA_shift_left(self, arg2)

    def shift_right(self, arg2):
        r"""Shift a base to the right and the rightmost base is return . "ACGT", shift_right('A') becomes "AACG" and 'T' is returned"""
        return _dna_jellyfish.MerDNA_shift_right(self, arg2)

    def canonicalize(self):
        r"""Change the mer to its canonical representation"""
        return _dna_jellyfish.MerDNA_canonicalize(self)

    def reverse_complement(self):
        r"""Change the mer to its reverse complement"""
        return _dna_jellyfish.MerDNA_reverse_complement(self)

    def get_canonical(self):
        r"""Return canonical representation of the mer"""
        return _dna_jellyfish.MerDNA_get_canonical(self)

    def get_reverse_complement(self):
        r"""Return the reverse complement of the mer"""
        return _dna_jellyfish.MerDNA_get_reverse_complement(self)

    def __eq__(self, arg2):
        r"""Equality between mers"""
        return _dna_jellyfish.MerDNA___eq__(self, arg2)

    def __lt__(self, arg2):
        r"""Lexicographic less-than"""
        return _dna_jellyfish.MerDNA___lt__(self, arg2)

    def __gt__(self, arg2):
        r"""Lexicographic greater-than"""
        return _dna_jellyfish.MerDNA___gt__(self, arg2)

    def dup(self):
        r"""Duplicate the mer"""
        return _dna_jellyfish.MerDNA_dup(self)

    def __str__(self):
        r"""Return string representation of the mer"""
        return _dna_jellyfish.MerDNA___str__(self)

    def set(self, s):
        r"""Set the mer from a string"""
        return _dna_jellyfish.MerDNA_set(self, s)

    def __getitem__(self, i):
        r"""Get base i (0 <= i < k)"""
        return _dna_jellyfish.MerDNA___getitem__(self, i)

    def __setitem__(self, i, b):
        r"""Set base i (0 <= i < k)"""
        return _dna_jellyfish.MerDNA___setitem__(self, i, b)

    def __lshift__(self, b):
        r"""Shift a base to the left and return the mer"""
        return _dna_jellyfish.MerDNA___lshift__(self, b)

    def __rshift__(self, b):
        r"""Shift a base to the right and return the mer"""
        return _dna_jellyfish.MerDNA___rshift__(self, b)
    __swig_destroy__ = _dna_jellyfish.delete_MerDNA

# Register MerDNA in _dna_jellyfish:
_dna_jellyfish.MerDNA_swigregister(MerDNA)
class QueryMerFile(object):
    r"""Give random access to a Jellyfish database. Given a mer, it returns the count associated with that mer"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, path):
        r"""Open the jellyfish database"""
        _dna_jellyfish.QueryMerFile_swiginit(self, _dna_jellyfish.new_QueryMerFile(path))

    def __getitem__(self, m):
        r"""Get the count for the mer m"""
        return _dna_jellyfish.QueryMerFile___getitem__(self, m)
    __swig_destroy__ = _dna_jellyfish.delete_QueryMerFile

# Register QueryMerFile in _dna_jellyfish:
_dna_jellyfish.QueryMerFile_swigregister(QueryMerFile)
class ReadMerFile(object):
    r"""Read a Jellyfish database sequentially"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, path):
        r"""Open the jellyfish database"""
        _dna_jellyfish.ReadMerFile_swiginit(self, _dna_jellyfish.new_ReadMerFile(path))

    def next_mer(self):
        r"""Move to the next mer in the file. Returns false if no mers left, true otherwise"""
        return _dna_jellyfish.ReadMerFile_next_mer(self)

    def mer(self):
        r"""Returns current mer"""
        return _dna_jellyfish.ReadMerFile_mer(self)

    def count(self):
        r"""Returns the count of the current mer"""
        return _dna_jellyfish.ReadMerFile_count(self)

    def __iter__(self):
        r"""Iterate through all the mers in the file, passing two values: a mer and its count"""
        return _dna_jellyfish.ReadMerFile___iter__(self)

    def __next__(self):
        r"""Iterate through all the mers in the file, passing two values: a mer and its count"""
        return _dna_jellyfish.ReadMerFile___next__(self)

    def next(self):
        r"""Iterate through all the mers in the file, passing two values: a mer and its count"""
        return _dna_jellyfish.ReadMerFile_next(self)
    __swig_destroy__ = _dna_jellyfish.delete_ReadMerFile

# Register ReadMerFile in _dna_jellyfish:
_dna_jellyfish.ReadMerFile_swigregister(ReadMerFile)
class HashCounter(object):
    r"""Read a Jellyfish database sequentially"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size, val_len, nb_threads=1):
        r"""Read a Jellyfish database sequentiallyRead a Jellyfish database sequentially"""
        _dna_jellyfish.HashCounter_swiginit(self, _dna_jellyfish.new_HashCounter(size, val_len, nb_threads))

    def size(self):
        r"""Read a Jellyfish database sequentially"""
        return _dna_jellyfish.HashCounter_size(self)

    def val_len(self):
        r"""Read a Jellyfish database sequentially"""
        return _dna_jellyfish.HashCounter_val_len(self)

    def add(self, m, x):
        r"""Read a Jellyfish database sequentially"""
        return _dna_jellyfish.HashCounter_add(self, m, x)

    def update_add(self, arg2, arg3):
        r"""Read a Jellyfish database sequentially"""
        return _dna_jellyfish.HashCounter_update_add(self, arg2, arg3)

    def get(self, m):
        r"""Read a Jellyfish database sequentially"""
        return _dna_jellyfish.HashCounter_get(self, m)

    def __getitem__(self, m):
        r"""Read a Jellyfish database sequentially"""
        return _dna_jellyfish.HashCounter___getitem__(self, m)
    __swig_destroy__ = _dna_jellyfish.delete_HashCounter

# Register HashCounter in _dna_jellyfish:
_dna_jellyfish.HashCounter_swigregister(HashCounter)
class HashSet(object):
    r"""Read a Jellyfish database sequentially"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size, nb_threads=1):
        r"""Read a Jellyfish database sequentiallyRead a Jellyfish database sequentially"""
        _dna_jellyfish.HashSet_swiginit(self, _dna_jellyfish.new_HashSet(size, nb_threads))

    def size(self):
        r"""Read a Jellyfish database sequentially"""
        return _dna_jellyfish.HashSet_size(self)

    def add(self, m):
        r"""Read a Jellyfish database sequentially"""
        return _dna_jellyfish.HashSet_add(self, m)

    def get(self, m):
        r"""Read a Jellyfish database sequentially"""
        return _dna_jellyfish.HashSet_get(self, m)

    def __getitem__(self, m):
        r"""Read a Jellyfish database sequentially"""
        return _dna_jellyfish.HashSet___getitem__(self, m)
    __swig_destroy__ = _dna_jellyfish.delete_HashSet

# Register HashSet in _dna_jellyfish:
_dna_jellyfish.HashSet_swigregister(HashSet)

def string_mers(str):
    r"""Get an iterator to the mers in the string"""
    return _dna_jellyfish.string_mers(str)

def string_canonicals(str):
    r"""Get an iterator to the canonical mers in the string"""
    return _dna_jellyfish.string_canonicals(str)
class StringMers(object):
    r"""Extract k-mers from a sequence string"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, str, len, canonical):
        r"""Create a k-mers parser from a string. Pass true as a second argument to get canonical mers"""
        _dna_jellyfish.StringMers_swiginit(self, _dna_jellyfish.new_StringMers(str, len, canonical))

    def next_mer(self):
        r"""Get the next mer. Return false if reached the end of the string."""
        return _dna_jellyfish.StringMers_next_mer(self)

    def mer(self):
        r"""Return the current mer (or its canonical representation)"""
        return _dna_jellyfish.StringMers_mer(self)

    def __iter__(self):
        r"""Return the current mer (or its canonical representation)"""
        return _dna_jellyfish.StringMers___iter__(self)

    def __next__(self):
        r"""Return the current mer (or its canonical representation)"""
        return _dna_jellyfish.StringMers___next__(self)

    def next(self):
        r"""Return the current mer (or its canonical representation)"""
        return _dna_jellyfish.StringMers_next(self)
    __swig_destroy__ = _dna_jellyfish.delete_StringMers

# Register StringMers in _dna_jellyfish:
_dna_jellyfish.StringMers_swigregister(StringMers)

