all_samples=["SRR13577847"]
busco_lineage="lepidoptera"
tidk_lineage="Lepidoptera"

rule targets:
	input:
		expand("{sample}_linear_plot.png", sample=all_samples), #fasta_qc
		expand("{sample}.p_ctg.fa", sample=all_samples), #assembly
		expand("{sample}.p_ctg.fa.fai", sample=all_samples), #indexing
		expand("{sample}_busco_short_summary.txt", sample=all_samples), #busco
		expand("tidk_{sample}.svg", sample=all_samples), #telo
		expand("{sample}_quast_report.txt", sample=all_samples), #quast
#		expand("../analysis/snake/{sample}.bp.p_ctg.gfa", sample=all_samples), #assembly
#		expand("../logs/{sample}.log", sample=all_samples),
#		expand("../results/{sample}.linear_plot.png", sample=all_samples), #fasta_qc
#		"../results/allAnnotation_{sample}.gff" #annotations
        
rule data_qc:
	input:
		hifi_reads="{sample}.fa"
	output:
		"{sample}_linear_plot.png"   
	shell:
		"""
		jellyfish count -C -m 20 -s 1000000000 -t 10 {input.hifi_reads} -o {wildcards.sample}.jf
		jellyfish histo -t 10 {wildcards.sample}.jf > {wildcards.sample}.histo
		genomescope2 -i {wildcards.sample}.histo -o genomescope_{wildcards.sample} -k 20 #kmer_size
		cp genomescope_{wildcards.sample}/linear_plot.png {wildcards.sample}_linear_plot.png
		"""

rule assembly:
	input:
		hifi_reads="{sample}.fa"
	output:
		"{sample}.p_ctg.fa",
	shell:
		"""
		bash assembly.sh {wildcards.sample} {input.hifi_reads}
		"""
rule index:
	input:
		assembly="{sample}.p_ctg.fa"
	output:
		"{sample}.p_ctg.fa.fai"
	shell:
		"""
		samtools faidx {input.assembly}
		"""
rule busco:
	input:
		assembly="{sample}.p_ctg.fa"
	output:
		"{sample}_busco_short_summary.txt"
	shell:
		"""
		singularity exec docker://ezlabgva/busco:v5.4.7_cv1 busco -i {input.assembly} -f -l lepidoptera -o busco_{wildcards.sample} -m geno
		cp busco_{wildcards.sample}/run*/short_summary.txt {wildcards.sample}_busco_short_summary.txt
		cp busco_{wildcards.sample}/run*/full_table.tsv {wildcards.sample}_busco_full_table.tsv
		"""

rule telo:
	input:
		assembly="{sample}.p_ctg.fa"
	output:
		"tidk_{sample}.svg"
	shell:
		"""
		bash telomere.sh {wildcards.sample} {input.assembly}
		"""

rule quast:
	input:
		assembly="{sample}.p_ctg.fa"
	output:
		"{sample}_quast_report.txt"
	shell:
		"""
		quast -o quast_{wildcards.sample} {input.assembly}
		cp quast_{wildcards.sample}/report.txt {wildcards.sample}_quast_report.txt	
		"""

rule masking:
	input: 
		"../analysis/snake/{sample}.bp.p_ctg.gfa"
	output:
		"../results/{sample}.bp.p_ctg.masked.fasta"
	shell:
		"""
		bash scripts/maskingFasta.py"
		"""

rule geneAnnotations:
	input:
		"../results/{sample}.bp.p_ctg.masked.fasta"
	output:
		"../analysis/geneAnnotation_{sample}.gff"
	script:
		"scripts/geneGFF.py" 

rule noncodingAnnotations:
	input:
		"../results/{sample}.bp.p_ctg.masked.fasta"
	output:
		"../analysis/noncodingAnnotation_{sample}.gff"
	script:
		"scripts/noncodingGFF.py" 

rule combinedGFF:
	input:
		"../analysis/geneAnnotation_{sample}.gff",
		"../analysis/noncodingAnnotation_{sample}.gff"
	output:
		"../results/allAnnotation_{sample}.gff"
	script:
		"combineGFF.py"
